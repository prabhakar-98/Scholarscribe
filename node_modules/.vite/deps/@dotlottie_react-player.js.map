{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/useUpdateEffect.js", "../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/useFirstMountState.js", "../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/misc/util.js", "../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/useClickAway.js", "../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/useEvent.js", "../../node_modules/.pnpm/react-use@17.4.0_react-dom@16.14.0_react@16.14.0/node_modules/react-use/esm/useKey.js", "../../@dotlottie/react-player/src/providers/dotlottie.tsx", "../../@dotlottie/react-player/src/hooks/use-sync-external-store.ts"],
  "sourcesContent": ["import { useEffect } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nvar useUpdateEffect = function (effect, deps) {\n    var isFirstMount = useFirstMountState();\n    useEffect(function () {\n        if (!isFirstMount) {\n            return effect();\n        }\n    }, deps);\n};\nexport default useUpdateEffect;\n", "import { useRef } from 'react';\nexport function useFirstMountState() {\n    var isFirst = useRef(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n", "export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n", "import { useEffect, useRef } from 'react';\nimport { off, on } from './misc/util';\nvar defaultEvents = ['mousedown', 'touchstart'];\nvar useClickAway = function (ref, onClickAway, events) {\n    if (events === void 0) { events = defaultEvents; }\n    var savedCallback = useRef(onClickAway);\n    useEffect(function () {\n        savedCallback.current = onClickAway;\n    }, [onClickAway]);\n    useEffect(function () {\n        var handler = function (event) {\n            var el = ref.current;\n            el && !el.contains(event.target) && savedCallback.current(event);\n        };\n        for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n            var eventName = events_1[_i];\n            on(document, eventName, handler);\n        }\n        return function () {\n            for (var _i = 0, events_2 = events; _i < events_2.length; _i++) {\n                var eventName = events_2[_i];\n                off(document, eventName, handler);\n            }\n        };\n    }, [events, ref]);\n};\nexport default useClickAway;\n", "import { useEffect } from 'react';\nimport { isBrowser, off, on } from './misc/util';\nvar defaultTarget = isBrowser ? window : null;\nvar isListenerType1 = function (target) {\n    return !!target.addEventListener;\n};\nvar isListenerType2 = function (target) {\n    return !!target.on;\n};\nvar useEvent = function (name, handler, target, options) {\n    if (target === void 0) { target = defaultTarget; }\n    useEffect(function () {\n        if (!handler) {\n            return;\n        }\n        if (!target) {\n            return;\n        }\n        if (isListenerType1(target)) {\n            on(target, name, handler, options);\n        }\n        else if (isListenerType2(target)) {\n            target.on(name, handler, options);\n        }\n        return function () {\n            if (isListenerType1(target)) {\n                off(target, name, handler, options);\n            }\n            else if (isListenerType2(target)) {\n                target.off(name, handler, options);\n            }\n        };\n    }, [name, handler, target, JSON.stringify(options)]);\n};\nexport default useEvent;\n", "import { useMemo } from 'react';\nimport useEvent from './useEvent';\nimport { noop } from './misc/util';\nvar createKeyPredicate = function (keyFilter) {\n    return typeof keyFilter === 'function'\n        ? keyFilter\n        : typeof keyFilter === 'string'\n            ? function (event) { return event.key === keyFilter; }\n            : keyFilter\n                ? function () { return true; }\n                : function () { return false; };\n};\nvar useKey = function (key, fn, opts, deps) {\n    if (fn === void 0) { fn = noop; }\n    if (opts === void 0) { opts = {}; }\n    if (deps === void 0) { deps = [key]; }\n    var _a = opts.event, event = _a === void 0 ? 'keydown' : _a, target = opts.target, options = opts.options;\n    var useMemoHandler = useMemo(function () {\n        var predicate = createKeyPredicate(key);\n        var handler = function (handlerEvent) {\n            if (predicate(handlerEvent)) {\n                return fn(handlerEvent);\n            }\n        };\n        return handler;\n    }, deps);\n    useEvent(event, useMemoHandler, target, options);\n};\nexport default useKey;\n", "/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieCommonPlayer } from '@dotlottie/common';\nimport { createError } from '@dotlottie/common';\nimport { createContext, useContext } from 'react';\n\nconst DotLottieContext = createContext<DotLottieCommonPlayer | null>(null);\n\nexport const DotLottieProvider = DotLottieContext.Provider;\n\nexport const useDotLottieContext = (): DotLottieCommonPlayer | null => {\n  const dotLottiePlayer = useContext(DotLottieContext);\n\n  if (typeof dotLottiePlayer === 'undefined') {\n    throw createError('useDotLottieContext must be used within a DotLottieProvider');\n  }\n\n  return dotLottiePlayer;\n};\n", "/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport { useState, useEffect } from 'react';\n\ntype SubscribeFunction = (onStateChange: () => void) => () => void;\ntype GetSnapshotFunction<T> = () => T;\n\nexport const useSyncExternalStore = <T>(\n  subscribe: SubscribeFunction,\n  getSnapshot: GetSnapshotFunction<T>,\n  getDefaultSnapshot: GetSnapshotFunction<T>,\n): T => {\n  const [state, setState] = useState<T>(() => {\n    return getDefaultSnapshot();\n  });\n\n  useEffect(() => {\n    const unsubscribe = subscribe(() => {\n      const newState = getSnapshot();\n\n      setState(newState);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [subscribe]);\n\n  return state as T;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mBCEI;",
  "names": []
}
